import matplotlib; matplotlib.use("TkAgg")
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import random
from scipy.stats import levy
from scipy.stats import binom



import matplotlib; matplotlib.use("TkAgg")
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import random
from scipy.stats import levy
from scipy.stats import binom




L = np.zeros((100, 100))
Lnew = np.zeros((100, 100))


N=100

#warunki brzegowe
#L[9] = 1
#Lnew[9] = 1


#stop
#def stop(L, Lnew):
#    return np.abs(np.sum(Lnew)-np.sum(L))
#m = levy.rvs(size=1)
#m=np.round(m,0)


def movement(los):



    if los > 3:
        m = random.randrange(1,2)
    else:
        m = random.randrange(1, 3)
  #while True:

       #d = np.round(levy.rvs(size=1), 0)
       #d.astype(int)
       #m = d[0]
       #m=m.astype(int)
       #if 40 < m and m < 75:
       #   break




    match los:
        case 1:
            pos[0] -= m
        case 2:
            pos[0] -= m
            pos[1] -= m
        case 3:
            pos[1] -= m
        case 4:
            pos[0] += m
            pos[1] -= m
        case 5:
            pos[0] += m
        case 6:
            pos[0] += m
            pos[1] += m
        case 7:
            pos[1] += m
        case 8:
            pos[0] -= m
            pos[1] += m



data = []

pos = [50, 50]
L[pos[0], pos[1]] = 1

def laplace(L,Lnew):
    e=1
    #while e>0.01:
    for k in range(1,1001):
        #for i in range(1, 9):
            #for j in range(1, 9):
        Lnew[1:99, 1:99] = 0.25 * (L[:-2, 1:99] + L[2: , 1:99] + L[1:99, :-2] + L[1:99,2:])

        #Lnew[pos[0], pos[1]] = 1



        if 3 < pos[0] < 97 and 3 < pos[1] < 97:
            los = random.randrange(1,9)
            movement(los)
        else:
            if pos[0] & pos[1] < 3:
                los = random.randrange(5,7)
                movement(los)
            else:
                los = random.randrange(1, 3)
                movement(los)
        Lnew[pos[0], pos[1]] = 1







        data.append(Lnew.copy())
        L=np.copy(Lnew)



    return(data)


data=laplace(L,Lnew)





fig, ax = plt.subplots()
mat = ax.matshow(data[0])

def update(frame):
    mat.set_array(data[frame])
    return [mat]

ani = animation.FuncAnimation(fig, update, frames=range(0, len(data), 10), interval=100, repeat=False)
plt.show()
